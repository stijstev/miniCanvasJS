import{Shape,Circle,Rect,CustomShape}from'./Shape.js';import{Animation}from'./Animations.js';import{Transform}from'./Transforms.js';export class Cvs{constructor(a){this.style={width:a.width||300,height:a.height||300,background:a.background||'#333333'},this.offScreen={mode:a.offScreen.mode||'delete',time:a.offScreen.time||1e4},this.cvs=null,this.renderQueue=[],this.renderFrameRequest=null,this.ctx=null,this.createCanvas()}createCanvas(){let a=document.createElement('canvas');this.cvs=a;const b=a.getContext('2d');this.ctx=b;let c={id:'miniCanvas',width:`${this.style.width}px`,height:`${this.style.height}px`,style:`background-color: ${this.style.background}`};for(let a in c)this.cvs.setAttribute(a,`${c[a]}`);document.body.appendChild(a)}clear(){this.ctx.clearRect(0,0,this.cvs.width,this.cvs.height)}renderStop(){window.cancelAnimationFrame(this.renderFrameRequest)}renderStart(a=60){this.frameRate=a,this._watchDog(),this._render()}_watchDog(){setInterval(()=>{this.renderQueue.forEach((a,b)=>{if(a.props.x>this.style.width+30||-30>a.props.x||a.props.y>this.style.height+30||-30>a.props.y)switch(this.offScreen.mode){case'noDraw':this.renderQueue.splice(b,1);break;case'delete':this.renderQueue.splice(b,1),a=null;}})},this.offScreen.time)}_render(){this.ctx.clearRect(0,0,this.cvs.width,this.cvs.height),this.renderQueue.forEach((a)=>{a._drawInstructions()},this),this.renderFrameRequest=window.requestAnimationFrame(()=>{this._render()})}}