class Animation{constructor(a,b){this.object=b,this.animIndex=b.anims.length-1,this.anim=null,this.increment,this.incrementValue,this.animProps=a,this.onComplete=a.onComplete}init(a){return this.anim=setInterval(()=>{a()},16.66667),this}stop(){return clearInterval(this.anim),!this.onComplete||void this.onComplete()}}class animX extends Animation{constructor(a,b){super(a,b)}animate(){this.incrementValue=this.animProps.coord/(this.animProps.time/16.66667),this.increment=Math.round(this.animProps.coord/this.incrementValue),super.init(()=>{0<this.increment?(this.object.props.x+=this.incrementValue,this.increment--):this.stop()})}}class animY extends Animation{constructor(a,b){super(a,b)}animate(){this.incrementValue=this.animProps.coord/(this.animProps.time/16.66667),this.increment=Math.round(this.animProps.coord/this.incrementValue),super.init(()=>{0<this.increment?(this.object.props.y+=this.incrementValue,this.increment--):this.stop()})}}class animRadius extends Animation{constructor(a,b){super(a,b),this.animProps=a}animate(){const a=this.animProps.radius/(this.animProps.time/(1e3/60));return this.anim=setInterval(()=>{this.object.props.radius+=a},1e3/60),setTimeout(()=>{super.stop()},this.animProps.time),this}}class animWidth extends Animation{constructor(a,b){super(a,b)}animate(){this.incrementValue=this.animProps.width/(this.animProps.time/16.66667),this.increment=Math.round(this.animProps.width/this.incrementValue),super.init(()=>{0<this.increment?(this.object.props.width+=this.incrementValue,this.increment--):this.stop()})}}class animHeight extends Animation{constructor(a,b){super(a,b)}animate(){this.incrementValue=this.animProps.height/(this.animProps.time/16.66667),this.increment=Math.round(this.animProps.height/this.incrementValue),super.init(()=>{0<this.increment?(this.object.props.height+=this.incrementValue,this.increment--):this.stop()})}}
class Canvas{constructor(a){this.debug=!0,this.style={width:a.width||300,height:a.height||300,background:a.background||'#333333'},this.offScreen={mode:a.offScreen.mode||'delete',time:a.offScreen.time||1e4},this.cvs=null,this.renderQueue=new Map,this.renderFrameRequest=null,this.ctx=null,this.createCanvas()}createCanvas(){let a=document.createElement('canvas');this.cvs=a;const b=a.getContext('2d');this.ctx=b;let c={id:'miniCanvas',width:`${this.style.width}px`,height:`${this.style.height}px`,style:`background-color: ${this.style.background}`};for(let a in c)this.cvs.setAttribute(a,`${c[a]}`);document.body.appendChild(a)}clear(){this.ctx.clearRect(0,0,this.cvs.width,this.cvs.height)}renderStop(){window.cancelAnimationFrame(this.renderFrameRequest)}renderStart(a=60){this.frameRate=a,this._render()}_watchDog(){setInterval(()=>{this.debug&&console.log(this.renderQueue.size);for(let[a,b]of this.renderQueue.entries())if(b.props.x>this.style.width+30||-30>b.props.x||b.props.y>this.style.height+30||-30>b.props.y)switch(this.offScreen.mode){case'noDraw':this.renderQueue.delete(a);break;case'delete':this.renderQueue.delete(a),b=null;}},this.offScreen.time)}_render(){this.ctx.clearRect(0,0,this.cvs.width,this.cvs.height);for(let[a,b]of this.renderQueue.entries()){let a=(a,c)=>{b.drawInstructions.connect(a,c)},c=b.drawInstructions.points();b.drawInstructions.onStart(),c.forEach((b)=>{a(b.x,b.y)}),b.drawInstructions.onFinish()}this.renderFrameRequest=window.requestAnimationFrame(()=>{this._render()})}}
class Shape{constructor(a){this.props={width:a.width,height:a.height,radius:a.radius,x:a.x,y:a.y,fillColor:a.color},this._transforms={scaleX:1,scaleY:1,angle:0,translateX:0,translateY:0,reflect:!1},this.drawInstructions=null,this.parentCanvas=a.canvas,this.renderQueueIndex=null,this.anims=[]}static transform(){return transform}get animate(){return{x:(a)=>{new animX(a,this).animate()},y:(a)=>{new animY(a,this).animate()},width:(a)=>{new animWidth(a,this).animate()},height:(a)=>{new animHeight(a,this).animate()},radius:(a)=>{new animRadius(a,this).animate()},rotate:(a)=>{new animRotate(a,this).animate()}}}draw(){this.renderQueueIndex=`${new Date().getTime()}${10*Math.random()}`,this.parentCanvas.renderQueue.set(this.renderQueueIndex,this)}del(){this.parentCanvas.renderQueue.delete(this.renderQueueIndex)}}class Rect extends Shape{constructor(a){super(a),this.init()}init(){super.drawInstructions={onStart:()=>{this.parentCanvas.ctx.moveTo(this.props.x,this.props.y),this.parentCanvas.ctx.beginPath()},connect:(a,b)=>{this.parentCanvas.ctx.lineTo(this.props.x+a,this.props.y+b)},onFinish:()=>{this.parentCanvas.ctx.closePath(),this.parentCanvas.ctx.strokeStyle=this.props.strokeColor,this.parentCanvas.ctx.lineWidth=this.props.lineWidth,this.parentCanvas.ctx.fillStyle=this.props.fillColor,this.parentCanvas.ctx.fill()},points:()=>{let a=this.props;return[{x:a.width,y:0},{x:a.width,y:a.height},{x:0,y:a.height},{x:0,y:0}]}}}}class Circle extends Shape{constructor(a){super(a),this.setDrawInstructions()}setDrawInstructions(){super.drawInstructions=()=>{const a=this.parentCanvas.ctx;a.beginPath(),a.arc(this.props.x,this.props.y,this.props.radius,0,2*Math.PI),a.strokeStyle=this.props.strokeColor,a.lineWidth=this.props.lineWidth,a.fillStyle=this.props.fillColor,a.fill()}}}class CustomShape extends Shape{constructor(a){super(a),this.drawInstructions=a.drawInstructions}}
const transform={x:(a,b)=>{b.props.x+=a},y:(a,b)=>{b.props.y+=a},scaleX:(a,b)=>{b.props.width*=a},scaleY:(a,b)=>{b.props.height*=a},rotate:()=>{},skew:()=>{}};